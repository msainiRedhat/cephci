/*
    Pipeline script for executing weekly scheduled test suites
*/

// Set default values
def nodeName = "centos-7"

// Default job parameters
def overrides = "${params.overrides}" ? "{}" : "${params.overrides}"
def tags = "${params.tags}" ? "openstack-only,tier-1,stage-1" : "${params.tags}"
def releaseContent = [:]

// Pipeline script entry point
node(nodeName) {
    stage('Install prereq') {
            if (env.WORKSPACE) { sh script: "sudo rm -rf * .venv" }
            checkout(
                scm: [
                    $class: 'GitSCM',
                    branches: [[name: 'refs/remotes/origin/ck_pipeline']],
                    extensions: [
                        [
                            $class: 'CleanBeforeCheckout',
                            deleteUntrackedNestedRepositories: true
                        ],
                        [
                            $class: 'WipeWorkspace'
                        ],
                        [
                            $class: 'CloneOption',
                            depth: 1,
                            noTags: true,
                            shallow: true,
                            timeout: 10,
                            reference: ''
                        ]
                    ],
                    userRemoteConfigs: [[
                        url: 'https://github.com/red-hat-storage/cephci.git'
                    ]]
                ],
                changelog: false,
                poll: false
            )

            // prepare the node
            sharedLib = load("${env.WORKSPACE}/pipeline/vars/lib.groovy")
            sharedLib.prepareNode()
        }

    stage("Trigger Pipeline") {
        ciMap = sharedLib.getCIMessageMap()
        def buildType = "tier-0"
        def rhcephVersion = ciMap["artifact"]["nvr"]
        def recipe_file = "${rhcephVersion}.yaml"
        println "recipe file is ${recipe_file}"
        
        def rhcsVersion = sharedLib.getRHCSVersionFromArtifactsNvr()
        majorVersion = rhcsVersion["major_version"]
        minorVersion = rhcsVersion["minor_version"]

        releaseContent = sharedLib.readFromReleaseFile(
            majorVersion, minorVersion, lockFlag=false
        )
        
        
        println "Starting test execution with parameters:"
        println "\trhcephVersion: ${rhcephVersion}\n\tbuildType: ${buildType}\n\tbuildArtifacts: ${releaseContent}\n\toverrides: ${overrides}\n\ttags: ${tags}"

            build ([
                wait: false,
                job: "ck-executor",
                parameters: [
                    string(name: 'rhcephVersion', value: rhcephVersion),
                    string(name: 'tags', value: tags),
                    string(name: 'buildType', value: buildType.toString()),
                    string(name: 'overrides', value: overrides.toString()),
                    string(name: 'buildArtifacts', value: releaseContent.get("tier-0").toString()),
                    string(name: 'gitbranch', value: 'ck_pipeline'),]
            ])
        }
    }
